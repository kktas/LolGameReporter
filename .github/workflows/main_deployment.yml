name: Build, Push to ECR, and Deploy to EC2

on: 
    push:
        branches:
            - master

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Copy appsettings.example.json into appsettings.json
          working-directory: ./src/TelegramBot
          run: |
            cp appsettings.example.json appsettings.json 

        - name: Set appsettings.json secrets and variables
          working-directory: ./src/TelegramBot
          run: |
            sed -i 's#<DATABASE_CONNECTION_STRING>#${{ secrets.DATABASE_CONNECTION_STRING }}#g' appsettings.json  
            sed -i 's#<HANGFIRE_CONNECTION_STRING>#${{ secrets.HANGFIRE_CONNECTION_STRING }}#g' appsettings.json  
            sed -i 's#<REDIS_CONNECTION_ADDRESS>#${{ secrets.REDIS_CONNECTION_ADDRESS }}#g' appsettings.json  
            sed -i 's#<TELEGRAM_BOT_API_KEY>#${{ secrets.TELEGRAM_BOT_API_KEY }}#g' appsettings.json  
            sed -i 's#<X_RIOT_TOKEN>#${{ secrets.X_RIOT_TOKEN }}#g' appsettings.json  
            sed -i 's#<LOG_LEVEL_DEFAULT>#${{ vars.LOG_LEVEL_DEFAULT }}#g' appsettings.json  
            sed -i 's#<LOG_LEVEL_HANGFIRE>#${{ vars.LOG_LEVEL_HANGFIRE }}#g' appsettings.json  
            sed -i 's#<MIGRATIONS_SCHEMA_NAME>#${{ vars.MIGRATIONS_SCHEMA_NAME }}#g' appsettings.json  
            sed -i 's#<MIGRATIONS_TABLE_NAME>#${{ vars.MIGRATIONS_TABLE_NAME }}#g' appsettings.json  
            sed -i 's#<AMERICAS_BASE_URI>#${{ vars.AMERICAS_BASE_URI }}#g' appsettings.json  
            sed -i 's#<EUROPE_BASE_URI>#${{ vars.EUROPE_BASE_URI }}#g' appsettings.json  
            sed -i 's#<ASIA_BASE_URI>#${{ vars.ASIA_BASE_URI }}#g' appsettings.json  
            sed -i 's#<NA_BASE_URI>#${{ vars.NA_BASE_URI }}#g' appsettings.json  
            sed -i 's#<EUW_BASE_URI>#${{ vars.EUW_BASE_URI }}#g' appsettings.json  
            sed -i 's#<EUNE_BASE_URI>#${{ vars.EUNE_BASE_URI }}#g' appsettings.json  
            sed -i 's#<TR_BASE_URI>#${{ vars.TR_BASE_URI }}#g' appsettings.json  
            sed -i 's#<JP_BASE_URI>#${{ vars.JP_BASE_URI }}#g' appsettings.json  

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Log in to Amazon ECR 
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build Docker image
          working-directory: ./src
          run: |
            docker build -t  ${{ steps.login-ecr.outputs.registry}}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }} -f ./TelegramBot/Dockerfile . 

        - name: Push Docker image to Amazon ECR
          run: |
            docker push  ${{ steps.login-ecr.outputs.registry}}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}

        - name: Deploy to EC2
          env: 
            AWS_REGION: ${{ secrets.AWS_REGION }}
            ECR_REPOSITORY_URI: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}
            GITHUB_SHA: ${{ github.sha }}
          run: |
            echo "${{ secrets.EC2_SSH_KEY }}" > private_key && chmod 600 private_key
            ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
                docker ps -a --filter \"ancestor=$ECR_REPOSITORY_URI\" --format \"{{.ID}}\" | xargs -r docker stop | xargs -r docker rm &&
                aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI &&
                docker pull $ECR_REPOSITORY_URI:$GITHUB_SHA &&
                docker run -d --add-host=host.docker.internal:host-gateway $ECR_REPOSITORY_URI:$GITHUB_SHA
            "
